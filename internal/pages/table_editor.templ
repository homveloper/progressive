package pages

import "progressive/internal/components"

templ TableEditorPage() {
	@components.AppLayout("테이블 편집기 - Progressive") {
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<!-- Header -->
			<div class="mb-6">
				<nav class="flex" aria-label="Breadcrumb">
					<ol class="flex items-center space-x-4">
						<li>
							<a href="/dashboard" class="text-gray-400 hover:text-gray-500">대시보드</a>
						</li>
						<li class="flex items-center">
							<svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
							</svg>
							<span class="ml-4 text-gray-900 font-medium">테이블 편집</span>
						</li>
					</ol>
				</nav>
				
				<div class="mt-4">
					<div>
						<h1 class="text-2xl font-bold text-gray-900" id="table-title">테이블 편집기</h1>
						<p class="mt-1 text-sm text-gray-600">JSON Schema 기반 구조화된 데이터 편집</p>
					</div>
				</div>
			</div>

			<!-- Filter and Search Bar -->
			<div class="mb-6 bg-white rounded-lg border border-gray-200 p-4">
				<div class="flex items-center justify-between">
					<div class="flex items-center space-x-4">
						<div class="relative">
							<svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
							</svg>
							<input type="text" placeholder="레코드 검색..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500"/>
						</div>
						
						<button class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
							<svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"/>
							</svg>
							필터
						</button>
						
						<button class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
							<svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"/>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v4H8V5z"/>
							</svg>
							정렬
						</button>
					</div>
					
					<div class="text-sm text-gray-600">
						총 <span id="total-records" class="font-medium">0</span>개 레코드
					</div>
				</div>
			</div>

			<!-- Data Grid Container -->
			<div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
				<!-- Grid Header (Column Headers) -->
				<div class="border-b border-gray-200 bg-gray-50">
					<div class="grid auto-cols-fr grid-flow-col gap-0" id="grid-header">
						<!-- Dynamic column headers will be inserted here -->
						<div class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
							로딩 중...
						</div>
					</div>
				</div>
				
				<!-- Grid Body (Data Rows) -->
				<div class="bg-white" id="grid-body">
					<!-- Loading state -->
					<div class="p-8 text-center text-gray-500" id="loading-state">
						<svg class="mx-auto h-8 w-8 animate-spin" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
						</svg>
						<p class="mt-2">데이터를 불러오는 중...</p>
					</div>
					
					<!-- Empty state -->
					<div class="p-8 text-center text-gray-500 hidden" id="empty-state">
						<svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0V4a1 1 0 011-1h14a1 1 0 011 1v16a1 1 0 01-1 1H5a1 1 0 01-1-1z"/>
						</svg>
						<h3 class="mt-2 text-sm font-medium text-gray-900">데이터 없음</h3>
						<p class="mt-1 text-sm text-gray-500">첫 번째 레코드를 추가해보세요.</p>
						<div class="mt-6">
							<button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
								<svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
								</svg>
								레코드 추가
							</button>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Alternative Views Demo -->
			<div class="mt-8 grid grid-cols-1 lg:grid-cols-3 gap-6">
				<!-- Card View Demo -->
				<div class="bg-white rounded-lg border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">카드 뷰</h3>
					<div class="space-y-4" id="card-view">
						<!-- Sample cards -->
						<div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
							<div class="flex justify-between items-start mb-2">
								<h4 class="text-sm font-medium text-gray-900">샘플 레코드 1</h4>
								<button class="text-gray-400 hover:text-gray-600">
									<svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
									</svg>
								</button>
							</div>
							<div class="text-sm text-gray-600 space-y-1">
								<div>이름: 김테스트</div>
								<div>이메일: test@example.com</div>
								<div>상태: 활성</div>
							</div>
						</div>
						
						<div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
							<div class="flex justify-between items-start mb-2">
								<h4 class="text-sm font-medium text-gray-900">샘플 레코드 2</h4>
								<button class="text-gray-400 hover:text-gray-600">
									<svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
									</svg>
								</button>
							</div>
							<div class="text-sm text-gray-600 space-y-1">
								<div>이름: 이샘플</div>
								<div>이메일: sample@example.com</div>
								<div>상태: 대기</div>
							</div>
						</div>
					</div>
				</div>
				
				<!-- JSON Editor Demo -->
				<div class="bg-white rounded-lg border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">JSON 에디터</h3>
					<div class="relative">
						<textarea class="w-full h-40 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm focus:ring-blue-500 focus:border-blue-500" placeholder="JSON 형식으로 직접 편집..." id="json-editor"></textarea>
						<button class="absolute bottom-3 right-3 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">
							적용
						</button>
					</div>
				</div>
				
				<!-- Form Editor Demo -->
				<div class="bg-white rounded-lg border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">폼 에디터</h3>
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">이름 *</label>
							<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500" value="김테스트"/>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">이메일 *</label>
							<input type="email" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500" value="test@example.com"/>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">상태</label>
							<select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500">
								<option value="active">활성</option>
								<option value="inactive">비활성</option>
								<option value="pending">대기</option>
							</select>
						</div>
						<button class="w-full px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700">
							저장
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Inline Edit Styles -->
		<style>
			.editable-cell {
				position: relative;
				cursor: pointer;
			}
			
			.editable-cell.editing {
				padding: 0 !important;
			}
			
			.editable-cell:hover {
				background-color: #f3f4f6;
			}
			
			.editable-cell.editing:hover {
				background-color: white;
			}
			
			.cell-input {
				width: 100%;
				height: 100%;
				border: 2px solid #3b82f6;
				background: white;
				padding: 12px 16px;
				outline: none;
				font-size: 0.875rem;
				border-radius: 4px;
			}
			
			.cell-textarea {
				width: 100%;
				min-height: 100px;
				border: 2px solid #3b82f6;
				background: white;
				padding: 8px 12px;
				outline: none;
				font-size: 0.875rem;
				border-radius: 4px;
				resize: vertical;
				font-family: 'Courier New', monospace;
			}
			
			.edit-indicator {
				position: absolute;
				top: 2px;
				right: 2px;
				width: 0;
				height: 0;
				border-left: 8px solid transparent;
				border-right: 8px solid #3b82f6;
				border-bottom: 8px solid transparent;
				border-top: 8px solid #3b82f6;
			}
			
			.mode-toggle.active {
				background-color: #3b82f6 !important;
				color: white !important;
			}
			
			.grid-readonly .editable-cell:hover {
				background-color: transparent;
				cursor: default;
			}
			
			.grid-readonly .editable-cell {
				cursor: default;
			}
			
			.selected-row {
				background-color: #dbeafe !important;
			}
			
			.selected-row:hover {
				background-color: #bfdbfe !important;
			}
			
			/* Floating Menu Styles */
			#floating-menu {
				animation: slideUp 0.3s ease-out;
			}
			
			@keyframes slideUp {
				from {
					opacity: 0;
					transform: translate(-50%, 20px);
				}
				to {
					opacity: 1;
					transform: translate(-50%, 0);
				}
			}
			
			#floating-menu .bg-white {
				backdrop-filter: blur(10px);
				background-color: rgba(255, 255, 255, 0.95);
			}
			
			#floating-menu button {
				transition: all 0.2s ease;
			}
			
			#floating-menu button:hover {
				transform: scale(1.1);
			}
			
			#floating-menu button:active {
				transform: scale(0.95);
			}
			
			/* Add some bottom padding to avoid overlap */
			body {
				padding-bottom: 100px;
			}
		</style>
		
		<!-- Floating Action Menu -->
		<div id="floating-menu" class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-40">
			<div class="bg-white rounded-full shadow-lg border border-gray-200 px-4 py-2">
				<div class="flex items-center space-x-1">
					<!-- View/Edit Mode Toggle -->
					<div class="flex items-center bg-gray-100 rounded-full p-1">
						<button id="viewer-mode" class="mode-toggle active w-10 h-10 rounded-full flex items-center justify-center text-white bg-blue-600 hover:bg-blue-700 transition-colors" title="뷰어 모드">
							<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
							</svg>
						</button>
						<button id="edit-mode" class="mode-toggle w-10 h-10 rounded-full flex items-center justify-center text-gray-600 hover:text-gray-800 hover:bg-gray-200 transition-colors" title="편집 모드">
							<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
							</svg>
						</button>
					</div>
					
					<!-- Divider -->
					<div class="w-px h-8 bg-gray-300 mx-2"></div>
					
					<!-- Add Record -->
					<button id="add-record" class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors" title="레코드 추가" disabled>
						<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
						</svg>
					</button>
					
					<!-- Delete Selected -->
					<button id="delete-selected" class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-red-600 hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors" title="선택 삭제" disabled>
						<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1-1H8a1 1 0 00-1 1v3M4 7h16"/>
						</svg>
					</button>
					
					<!-- Divider -->
					<div class="w-px h-8 bg-gray-300 mx-2"></div>
					
					<!-- Export -->
					<button id="export-data" class="w-10 h-10 rounded-full flex items-center justify-center text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors" title="내보내기">
						<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
						</svg>
					</button>
					
					<!-- Settings -->
					<button id="settings" class="w-10 h-10 rounded-full flex items-center justify-center text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors" title="설정">
						<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
						</svg>
					</button>
				</div>
			</div>
		</div>
		
		<!-- Delete Confirmation Modal -->
		<div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
			<div class="flex items-center justify-center min-h-screen px-4">
				<div class="bg-white rounded-lg max-w-md w-full">
					<div class="px-6 py-4">
						<div class="flex items-center">
							<svg class="w-6 h-6 text-red-600 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.854-.833-2.624 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
							</svg>
							<div>
								<h3 class="text-lg font-medium text-gray-900">레코드 삭제</h3>
								<p class="text-sm text-gray-500 mt-1" id="delete-message">선택한 레코드를 삭제하시겠습니까?</p>
							</div>
						</div>
					</div>
					<div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
						<button id="cancel-delete" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50">
							취소
						</button>
						<button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
							삭제
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- JavaScript for table functionality -->
		<script>
			// Global state
			let isEditMode = false;
			let currentEditCell = null;
			let selectedRecords = new Set();
			
			// Mock data and schema for demonstration
			let tableData = {
				name: "고객 관리",
				schema: {
					type: "object",
					properties: {
						name: { type: "string", title: "이름" },
						email: { type: "string", format: "email", title: "이메일" },
						company: { type: "string", title: "회사명" },
						status: { type: "string", enum: ["활성", "비활성", "대기"], title: "상태" },
						created_at: { type: "string", format: "date", title: "등록일" }
					},
					required: ["name", "email"]
				},
				records: [
					{
						id: "1",
						name: "김테스트",
						email: "kim@example.com",
						company: "테스트 회사",
						status: "활성",
						created_at: "2024-01-15"
					},
					{
						id: "2", 
						name: "이샘플",
						email: "lee@example.com",
						company: "샘플 기업",
						status: "대기",
						created_at: "2024-01-16"
					}
				]
			};

			document.addEventListener('DOMContentLoaded', function() {
				console.log('🚀 테이블 편집 페이지 로드됨');
				loadTableFromLocalStorage();
				initializeTableEditor();
				
				// Initialize JSON editor with sample data
				const jsonEditor = document.getElementById('json-editor');
				if (jsonEditor) {
					jsonEditor.value = JSON.stringify({
						"name": "김테스트",
						"email": "test@example.com",
						"status": "active", 
						"created_at": "2024-01-15"
					}, null, 2);
				}
			});
			
			function loadTableFromLocalStorage() {
				console.log('📂 로컬 스토리지에서 테이블 데이터 로드 시도');
				
				// URL에서 테이블 ID 추출
				const pathParts = window.location.pathname.split('/');
				const tableId = pathParts[pathParts.length - 1];
				console.log('🆔 테이블 ID:', tableId);
				
				if (!tableId || tableId === 'table') {
					console.warn('⚠️ 유효하지 않은 테이블 ID');
					return;
				}
				
				// 로컬 스토리지에서 테이블 데이터 로드
				const storedData = localStorage.getItem(`table_${tableId}`);
				if (storedData) {
					try {
						const loadedData = JSON.parse(storedData);
						console.log('✅ 테이블 데이터 로드 성공:', loadedData);
						
						// 전역 tableData 업데이트
						tableData = loadedData;
						console.log('🔄 전역 tableData 업데이트됨');
						
					} catch (error) {
						console.error('❌ 테이블 데이터 파싱 오류:', error);
					}
				} else {
					console.warn('⚠️ 테이블 데이터를 찾을 수 없음. 기본 데이터 사용');
				}
			}

			function initializeTableEditor() {
				// Set table title
				document.getElementById('table-title').textContent = tableData.name;
				
				// Render grid
				renderGrid();
				
				// Set up event listeners
				setupEventListeners();
			}

			function renderGrid() {
				const headerContainer = document.getElementById('grid-header');
				const bodyContainer = document.getElementById('grid-body');
				
				// Clear loading state
				document.getElementById('loading-state').classList.add('hidden');
				
				if (tableData.records.length === 0) {
					document.getElementById('empty-state').classList.remove('hidden');
					return;
				}
				
				// Render header
				const properties = tableData.schema.properties;
				headerContainer.innerHTML = '';
				
				// Add row selection column with select all checkbox
				headerContainer.innerHTML = `
					<div class="px-3 py-3 text-left border-r border-gray-200 w-12">
						<input type="checkbox" id="select-all" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
					</div>
				`;
				
				// Add property headers
				for (const [key, prop] of Object.entries(properties)) {
					const required = tableData.schema.required && tableData.schema.required.includes(key) ? '*' : '';
					headerContainer.innerHTML += `
						<div class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
							${prop.title || key}${required}
						</div>
					`;
				}
				
				// Remove actions column (no longer needed)
				
				// Render body
				bodyContainer.innerHTML = '';
				tableData.records.forEach((record, index) => {
					const row = document.createElement('div');
					row.className = 'grid auto-cols-fr grid-flow-col gap-0 border-b border-gray-200 hover:bg-gray-50';
					row.dataset.recordId = record.id;
					
					// Row selection checkbox
					const checkboxDiv = document.createElement('div');
					checkboxDiv.className = 'px-3 py-4 border-r border-gray-200 w-12';
					checkboxDiv.innerHTML = `
						<input type="checkbox" class="record-checkbox rounded border-gray-300 text-blue-600 focus:ring-blue-500" 
							   data-record-id="${record.id}" ${selectedRecords.has(record.id) ? 'checked' : ''}>
					`;
					row.appendChild(checkboxDiv);
					
					// Data cells
					for (const [key, prop] of Object.entries(properties)) {
						const value = record[key] || '';
						const cellDiv = document.createElement('div');
						cellDiv.className = 'editable-cell px-6 py-4 text-sm text-gray-900 border-r border-gray-200';
						cellDiv.dataset.field = key;
						cellDiv.dataset.recordId = record.id;
						cellDiv.dataset.dataType = prop.type;
						cellDiv.innerHTML = formatValue(value, prop);
						row.appendChild(cellDiv);
					}
					
					// Add selected row styling
					if (selectedRecords.has(record.id)) {
						row.classList.add('selected-row');
					}
					
					bodyContainer.appendChild(row);
				});
				
				// Update record count
				document.getElementById('total-records').textContent = tableData.records.length;
			}

			function formatValue(value, prop) {
				if (!value) return '<span class="text-gray-400">-</span>';
				
				if (prop.format === 'date') {
					return new Date(value).toLocaleDateString('ko-KR');
				}
				
				if (prop.enum && prop.enum.includes(value)) {
					const statusColors = {
						'활성': 'bg-green-100 text-green-800',
						'비활성': 'bg-red-100 text-red-800',
						'대기': 'bg-yellow-100 text-yellow-800'
					};
					const colorClass = statusColors[value] || 'bg-gray-100 text-gray-800';
					return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClass}">${value}</span>`;
				}
				
				return value;
			}

			function setupEventListeners() {
				console.log('🔧 이벤트 리스너 설정 중...');
				
				// Mode toggle buttons
				document.getElementById('viewer-mode').addEventListener('click', () => {
					console.log('👁️ 뷰어 모드로 전환');
					switchToViewerMode();
				});
				
				document.getElementById('edit-mode').addEventListener('click', () => {
					console.log('✏️ 편집 모드로 전환');
					switchToEditMode();
				});
				
				// Add record button (only enabled in edit mode)
				document.getElementById('add-record').addEventListener('click', () => {
					if (!isEditMode) return;
					console.log('➕ 새 레코드 추가');
					addNewRecord();
				});
				
				// Cell double-click for inline editing
				document.addEventListener('dblclick', (e) => {
					if (!isEditMode) return;
					const cell = e.target.closest('.editable-cell');
					if (cell && !cell.classList.contains('editing')) {
						console.log('🖱️ 셀 더블클릭:', cell.dataset);
						startInlineEdit(cell);
					}
				});
				
				// Selected delete button
				document.getElementById('delete-selected').addEventListener('click', () => {
					if (selectedRecords.size > 0) {
						console.log('🗑️ 선택된 레코드 삭제:', Array.from(selectedRecords));
						showDeleteModal();
					}
				});
				
				// Checkbox events
				document.addEventListener('change', (e) => {
					if (e.target.id === 'select-all') {
						handleSelectAll(e.target.checked);
					} else if (e.target.classList.contains('record-checkbox')) {
						handleRecordSelect(e.target.dataset.recordId, e.target.checked);
					}
				});
				
				// Global click handler to finish editing
				document.addEventListener('click', (e) => {
					if (currentEditCell && !e.target.closest('.editable-cell.editing')) {
						console.log('💾 편집 완료 (클릭 외부)');
						finishInlineEdit();
					}
				});
				
				// Escape key to cancel editing
				document.addEventListener('keydown', (e) => {
					if (e.key === 'Escape' && currentEditCell) {
						console.log('❌ 편집 취소 (ESC)');
						cancelInlineEdit();
					}
					if (e.key === 'Enter' && currentEditCell && !e.shiftKey) {
						console.log('💾 편집 완료 (Enter)');
						e.preventDefault();
						finishInlineEdit();
					}
				});
				
				// Delete modal events
				document.getElementById('cancel-delete').addEventListener('click', hideDeleteModal);
				document.getElementById('confirm-delete').addEventListener('click', confirmDelete);
				document.getElementById('delete-modal').addEventListener('click', (e) => {
					if (e.target.id === 'delete-modal') {
						hideDeleteModal();
					}
				});
				
				// Export and Settings buttons
				document.getElementById('export-data').addEventListener('click', () => {
					console.log('📤 데이터 내보내기');
					exportTableData();
				});
				
				document.getElementById('settings').addEventListener('click', () => {
					console.log('⚙️ 설정 메뉴');
					// TODO: 설정 기능 구현
					alert('설정 기능은 추후 구현 예정입니다.');
				});
			}

			// Mode switching functions
			function switchToViewerMode() {
				isEditMode = false;
				document.getElementById('viewer-mode').classList.add('active');
				document.getElementById('edit-mode').classList.remove('active');
				document.getElementById('add-record').disabled = true;
				document.getElementById('delete-selected').disabled = true;
				document.getElementById('grid-body').classList.add('grid-readonly');
				
				// Cancel any active editing
				if (currentEditCell) {
					cancelInlineEdit();
				}
				
				// Clear selection in viewer mode
				selectedRecords.clear();
				updateSelectionUI();
				
				console.log('📖 뷰어 모드 활성화');
			}
			
			function switchToEditMode() {
				isEditMode = true;
				document.getElementById('edit-mode').classList.add('active');
				document.getElementById('viewer-mode').classList.remove('active');
				document.getElementById('add-record').disabled = false;
				document.getElementById('grid-body').classList.remove('grid-readonly');
				
				console.log('✏️ 편집 모드 활성화');
			}
			
			// Inline editing functions
			function startInlineEdit(cell) {
				if (currentEditCell) {
					finishInlineEdit();
				}
				
				currentEditCell = cell;
				const field = cell.dataset.field;
				const recordId = cell.dataset.recordId;
				const dataType = cell.dataset.dataType;
				const record = tableData.records.find(r => r.id === recordId);
				const currentValue = record[field] || '';
				
				console.log('📝 인라인 편집 시작:', { field, recordId, dataType, currentValue });
				
				cell.classList.add('editing');
				cell.dataset.originalValue = currentValue;
				
				// Get schema property for this field
				const prop = tableData.schema.properties[field];
				const isComplexType = typeof currentValue === 'object' || prop.type === 'object';
				
				let input;
				if (isComplexType) {
					// For complex objects, use textarea with JSON
					input = document.createElement('textarea');
					input.className = 'cell-textarea';
					input.value = JSON.stringify(currentValue, null, 2);
					input.placeholder = 'JSON 객체를 편집하세요...';
				} else if (prop.enum) {
					// For enum fields, use select
					input = document.createElement('select');
					input.className = 'cell-input';
					prop.enum.forEach(option => {
						const opt = document.createElement('option');
						opt.value = option;
						opt.textContent = option;
						opt.selected = option === currentValue;
						input.appendChild(opt);
					});
				} else if (prop.type === 'boolean') {
					// For boolean fields, use select
					input = document.createElement('select');
					input.className = 'cell-input';
					['true', 'false'].forEach(option => {
						const opt = document.createElement('option');
						opt.value = option;
						opt.textContent = option === 'true' ? '참' : '거짓';
						opt.selected = String(currentValue) === option;
						input.appendChild(opt);
					});
				} else {
					// For simple fields, use input
					input = document.createElement('input');
					input.className = 'cell-input';
					input.type = getInputType(prop);
					input.value = currentValue;
				}
				
				cell.innerHTML = '';
				cell.appendChild(input);
				input.focus();
				
				if (input.select) {
					input.select();
				}
			}
			
			function finishInlineEdit() {
				if (!currentEditCell) return;
				
				const input = currentEditCell.querySelector('input, select, textarea');
				const field = currentEditCell.dataset.field;
				const recordId = currentEditCell.dataset.recordId;
				const prop = tableData.schema.properties[field];
				
				let newValue = input.value;
				
				// Handle different data types
				if (input.tagName === 'TEXTAREA') {
					// JSON object editing
					try {
						newValue = JSON.parse(input.value);
						console.log('📝 JSON 파싱 성공:', newValue);
					} catch (error) {
						console.error('❌ JSON 파싱 오류:', error);
						alert('유효하지 않은 JSON 형식입니다.');
						cancelInlineEdit();
						return;
					}
				} else if (prop.type === 'boolean') {
					newValue = newValue === 'true';
				} else if (prop.type === 'integer') {
					newValue = parseInt(newValue) || 0;
				} else if (prop.type === 'number') {
					newValue = parseFloat(newValue) || 0;
				}
				
				// Update the record
				const record = tableData.records.find(r => r.id === recordId);
				if (record) {
					record[field] = newValue;
					console.log('💾 값 업데이트:', { field, recordId, newValue });
					
					// Save to localStorage
					saveTableToLocalStorage();
				}
				
				// Update cell display
				currentEditCell.classList.remove('editing');
				currentEditCell.innerHTML = formatValue(newValue, prop);
				
				currentEditCell = null;
			}
			
			function cancelInlineEdit() {
				if (!currentEditCell) return;
				
				const originalValue = currentEditCell.dataset.originalValue;
				const field = currentEditCell.dataset.field;
				const prop = tableData.schema.properties[field];
				
				console.log('❌ 편집 취소:', { field, originalValue });
				
				currentEditCell.classList.remove('editing');
				currentEditCell.innerHTML = formatValue(originalValue, prop);
				currentEditCell = null;
			}
			
			function getInputType(prop) {
				if (prop.format === 'email') return 'email';
				if (prop.format === 'date') return 'date';
				if (prop.format === 'date-time') return 'datetime-local';
				if (prop.type === 'integer' || prop.type === 'number') return 'number';
				return 'text';
			}
			
			function addNewRecord() {
				const newRecord = { id: Date.now().toString() };
				
				// Initialize with default values based on schema
				for (const [key, prop] of Object.entries(tableData.schema.properties)) {
					if (prop.type === 'string') {
						newRecord[key] = '';
					} else if (prop.type === 'integer' || prop.type === 'number') {
						newRecord[key] = 0;
					} else if (prop.type === 'boolean') {
						newRecord[key] = false;
					} else {
						newRecord[key] = null;
					}
				}
				
				tableData.records.push(newRecord);
				console.log('➕ 새 레코드 추가:', newRecord);
				
				renderGrid();
				saveTableToLocalStorage();
			}
			
			// Checkbox selection functions
			function handleSelectAll(checked) {
				console.log('☑️ 전체 선택:', checked);
				
				if (checked) {
					// Select all records
					tableData.records.forEach(record => {
						selectedRecords.add(record.id);
					});
				} else {
					// Deselect all records
					selectedRecords.clear();
				}
				
				updateSelectionUI();
			}
			
			function handleRecordSelect(recordId, checked) {
				console.log('☑️ 레코드 선택:', recordId, checked);
				
				if (checked) {
					selectedRecords.add(recordId);
				} else {
					selectedRecords.delete(recordId);
				}
				
				updateSelectionUI();
			}
			
			function updateSelectionUI() {
				const selectAllCheckbox = document.getElementById('select-all');
				const deleteButton = document.getElementById('delete-selected');
				
				// Update select all checkbox state
				if (selectedRecords.size === 0) {
					selectAllCheckbox.checked = false;
					selectAllCheckbox.indeterminate = false;
				} else if (selectedRecords.size === tableData.records.length) {
					selectAllCheckbox.checked = true;
					selectAllCheckbox.indeterminate = false;
				} else {
					selectAllCheckbox.checked = false;
					selectAllCheckbox.indeterminate = true;
				}
				
				// Update delete button state
				deleteButton.disabled = selectedRecords.size === 0;
				
				// Update row selection visual state
				document.querySelectorAll('.record-checkbox').forEach(checkbox => {
					const row = checkbox.closest('[data-record-id]');
					const recordId = checkbox.dataset.recordId;
					
					if (selectedRecords.has(recordId)) {
						checkbox.checked = true;
						row.classList.add('selected-row');
					} else {
						checkbox.checked = false;
						row.classList.remove('selected-row');
					}
				});
				
				console.log('🔄 선택 상태 업데이트:', {
					selectedCount: selectedRecords.size,
					totalCount: tableData.records.length,
					deleteButtonEnabled: !deleteButton.disabled
				});
			}
			
			// Delete modal functions
			function showDeleteModal() {
				const modal = document.getElementById('delete-modal');
				const message = document.getElementById('delete-message');
				
				const count = selectedRecords.size;
				message.textContent = `선택한 ${count}개의 레코드를 삭제하시겠습니까?`;
				
				modal.classList.remove('hidden');
				console.log('🗑️ 삭제 모달 표시:', count);
			}
			
			function hideDeleteModal() {
				document.getElementById('delete-modal').classList.add('hidden');
				console.log('❌ 삭제 모달 숨김');
			}
			
			function confirmDelete() {
				const recordsToDelete = Array.from(selectedRecords);
				
				console.log('🗑️ 레코드 삭제 확인:', recordsToDelete);
				
				// Remove selected records from tableData
				tableData.records = tableData.records.filter(record => !selectedRecords.has(record.id));
				
				// Clear selection
				selectedRecords.clear();
				
				// Re-render grid
				renderGrid();
				saveTableToLocalStorage();
				
				// Hide modal
				hideDeleteModal();
				
				console.log('✅ 레코드 삭제 완료:', recordsToDelete.length + '개');
			}
			
			function saveTableToLocalStorage() {
				const pathParts = window.location.pathname.split('/');
				const tableId = pathParts[pathParts.length - 1];
				
				if (tableId && tableId !== 'table') {
					localStorage.setItem(`table_${tableId}`, JSON.stringify(tableData));
					console.log('💾 로컬 스토리지에 저장됨');
				}
			}
			
			function exportTableData() {
				const exportOptions = [
					{ label: 'JSON 형식으로 내보내기', action: 'json' },
					{ label: 'CSV 형식으로 내보내기', action: 'csv' },
					{ label: '스키마만 내보내기', action: 'schema' }
				];
				
				const choice = prompt('내보내기 형식을 선택하세요:\n1. JSON\n2. CSV\n3. Schema\n\n번호를 입력하세요 (1-3):');
				
				switch(choice) {
					case '1':
						exportAsJSON();
						break;
					case '2':
						exportAsCSV();
						break;
					case '3':
						exportSchema();
						break;
					default:
						if (choice !== null) {
							alert('올바른 번호를 입력하세요 (1-3)');
						}
				}
			}
			
			function exportAsJSON() {
				const dataToExport = {
					name: tableData.name,
					schema: tableData.schema,
					records: tableData.records,
					exportedAt: new Date().toISOString()
				};
				
				const blob = new Blob([JSON.stringify(dataToExport, null, 2)], { type: 'application/json' });
				downloadFile(blob, `${tableData.name}_data.json`);
				console.log('📤 JSON 파일로 내보내기 완료');
			}
			
			function exportAsCSV() {
				const headers = Object.keys(tableData.schema.properties);
				const csvContent = [
					headers.join(','), // Header row
					...tableData.records.map(record => 
						headers.map(header => {
							const value = record[header];
							// CSV 형식에 맞게 문자열 처리
							if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
								return `"${value.replace(/"/g, '""')}"`;
							}
							return value || '';
						}).join(',')
					)
				].join('\n');
				
				const blob = new Blob([csvContent], { type: 'text/csv' });
				downloadFile(blob, `${tableData.name}_data.csv`);
				console.log('📤 CSV 파일로 내보내기 완료');
			}
			
			function exportSchema() {
				const schemaToExport = {
					name: tableData.name,
					schema: tableData.schema,
					exportedAt: new Date().toISOString()
				};
				
				const blob = new Blob([JSON.stringify(schemaToExport, null, 2)], { type: 'application/json' });
				downloadFile(blob, `${tableData.name}_schema.json`);
				console.log('📤 스키마 파일로 내보내기 완료');
			}
			
			function downloadFile(blob, filename) {
				const url = URL.createObjectURL(blob);
				const a = document.createElement('a');
				a.href = url;
				a.download = filename;
				a.style.display = 'none';
				document.body.appendChild(a);
				a.click();
				document.body.removeChild(a);
				URL.revokeObjectURL(url);
			}
		</script>
	}
}